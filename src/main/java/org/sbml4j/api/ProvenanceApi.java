/**
 * --------------------------------------------------------------------------
 *                                 SBML4j
 * --------------------------------------------------------------------------
 * University of Tuebingen, 2022.
 * 
 * This code is part of the SBML4j software package and subject to the terms
 * and conditions defined by its license (MIT License). For license details
 * please refer to the LICENSE file included as part of this source code
 * package.
 * 
 * For a full list of authors, please refer to the file AUTHORS.
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech) (5.3.1). https://openapi-generator.tech Do
 * not edit the class manually.
 */
package org.sbml4j.api;

import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.sbml4j.model.api.provenance.ProvenanceInfoItem;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.
Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
          date = "2022-10-12T12:34:12.356284+02:00[Europe/Berlin]")
@Validated
@Api(value = "Provenance", description = "the Provenance API")
public interface ProvenanceApi {

  default Optional<NativeWebRequest> getRequest() { return Optional.empty(); }

  /**
   * GET /prov/{UUID} : Retrieve provenance information for entity
   *
   * @param UUID The UUID of the network to get (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param format  (optional)
   * @return Bad Request (status code 400)
   *         or successful operation (status code 200)
   */

  @ApiOperation(value = "Retrieve provenance information for entity",
                nickname = "getProvenance", notes = "",
                response = ProvenanceInfoItem.class, responseContainer = "List",
                tags =
                    {
                        "provenance",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Bad Request")
                  ,

                      @ApiResponse(code = 200, message = "successful operation",
                                   response = ProvenanceInfoItem.class,
                                   responseContainer = "List")
                })
  @RequestMapping(method = RequestMethod.GET, value = "/prov/{UUID}",
                  produces = {"application/json"})
  default ResponseEntity<ProvenanceInfoItem>
  getProvenance(
      @ApiParam(value = "The UUID of the network to get",
                required = true) @PathVariable("UUID") UUID UUID

      ,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(value = "", allowableValues = "json, xml, graphml") @Valid
      @RequestParam(value = "format", required = false) String format

  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"wasGeneratedBy\" : [ { \"endpoint\" : \"network/d25f4b9-8dd5-4bc3-9d04-9af418302244/context\", \"provenance\" : [ { \"key\" : \"provenance\" }, { \"key\" : \"provenance\" } ], \"name\" : \"Create_Neighborhood_Network\", \"type\" : \"createContext\", \"params\" : [ { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" }, { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" } ], \"body\" : \"\", \"operation\" : \"POST\" }, { \"endpoint\" : \"network/d25f4b9-8dd5-4bc3-9d04-9af418302244/context\", \"provenance\" : [ { \"key\" : \"provenance\" }, { \"key\" : \"provenance\" } ], \"name\" : \"Create_Neighborhood_Network\", \"type\" : \"createContext\", \"params\" : [ { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" }, { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" } ], \"body\" : \"\", \"operation\" : \"POST\" } ], \"contents\" : \"\", \"wasDerivedFrom\" : [ null, null ], \"wasAttributedTo\" : { \"name\" : \"sbml4j\", \"type\" : \"User\" }, \"type\" : \"MappingNode\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PUT /prov/{UUID} : Add provenance information to entity
   *
   * @param UUID The UUID of the network to get (required)
   * @param name A name for this provenance item (required)
   * @param requestBody A freeform json-object with key-value pairs of names and
   *     values to act as provenance-annotation (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @return Bad Request (status code 400)
   *         or The current user is forbidden from accessing this data (status
   * code 403) or successful operation (status code 200)
   */

  @ApiOperation(value = "Add provenance information to entity",
                nickname = "putProvenance", notes = "",
                response = ProvenanceInfoItem.class,
                tags =
                    {
                        "provenance",
                    })
  @ApiResponses(
      value =
      {
        @ApiResponse(code = 400, message = "Bad Request")
        ,

            @ApiResponse(
                code = 403,
                message =
                    "The current user is forbidden from accessing this data"),

            @ApiResponse(code = 200, message = "successful operation",
                         response = ProvenanceInfoItem.class)
      })
  @RequestMapping(method = RequestMethod.PUT, value = "/prov/{UUID}",
                  produces = {"application/json"},
                  consumes = {"application/json"})
  default ResponseEntity<ProvenanceInfoItem>
  putProvenance(
      @ApiParam(value = "The UUID of the network to get",
                required = true) @PathVariable("UUID") UUID UUID

      ,
      @NotNull @ApiParam(value = "A name for this provenance item",
                         required = true) @Valid
      @RequestParam(value = "name", required = true) String name

      ,

      @ApiParam(
          value =
              "A freeform json-object with key-value pairs of names and values to act as provenance-annotation",
          required = true) @Valid @RequestBody Map<String, Object> requestBody,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"wasGeneratedBy\" : [ { \"endpoint\" : \"network/d25f4b9-8dd5-4bc3-9d04-9af418302244/context\", \"provenance\" : [ { \"key\" : \"provenance\" }, { \"key\" : \"provenance\" } ], \"name\" : \"Create_Neighborhood_Network\", \"type\" : \"createContext\", \"params\" : [ { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" }, { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" } ], \"body\" : \"\", \"operation\" : \"POST\" }, { \"endpoint\" : \"network/d25f4b9-8dd5-4bc3-9d04-9af418302244/context\", \"provenance\" : [ { \"key\" : \"provenance\" }, { \"key\" : \"provenance\" } ], \"name\" : \"Create_Neighborhood_Network\", \"type\" : \"createContext\", \"params\" : [ { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" }, { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" } ], \"body\" : \"\", \"operation\" : \"POST\" } ], \"contents\" : \"\", \"wasDerivedFrom\" : [ null, null ], \"wasAttributedTo\" : { \"name\" : \"sbml4j\", \"type\" : \"User\" }, \"type\" : \"MappingNode\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
