/**
 * --------------------------------------------------------------------------
 *                                 SBML4j
 * --------------------------------------------------------------------------
 * University of Tuebingen, 2022.
 * 
 * This code is part of the SBML4j software package and subject to the terms
 * and conditions defined by its license (MIT License). For license details
 * please refer to the LICENSE file included as part of this source code
 * package.
 * 
 * For a full list of authors, please refer to the file AUTHORS.
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech) (5.0.1). https://openapi-generator.tech Do
 * not edit the class manually.
 */
package org.sbml4j.api;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.sbml4j.model.api.provenance.ProvenanceInfoItem;
import org.sbml4j.model.api.network.AnnotationItem;
import org.sbml4j.model.api.network.FilterOptions;
import org.sbml4j.model.api.network.NetworkInventoryItem;
import org.sbml4j.model.api.network.NetworkOptions;
import org.sbml4j.model.api.network.NodeList;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.
Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
          date = "2021-04-20T18:35:12.112356+02:00[Europe/Berlin]")
@Validated
@Api(value = "Networks", description = "the Networks API")
public interface NetworksApi {

  default Optional<NativeWebRequest> getRequest() { return Optional.empty(); }

  /**
   * POST /networks/{UUID}/annotation : Add annotation to network nodes and/or
   * relationships. Results in the creation of a new network entity, keeping the
   * entity with UUID unchanged.
   *
   * @param UUID The UUID of the parent network to derive a new network from
   *     (required)
   * @param annotationItem An annotation item with information about the
   *     annotations to be added (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param networkname An optional name for the newly generated network
   *     (optional)
   * @param prefixName Flag whether to prefix the given networkname on the
   *     original network name (true) or use networkname as sole name for the
   *     created network (false) (optional, default to false)
   * @param derive Flag whether to derive a new network and add annotation to it
   *     (true) or add annotation to existing network without deriving
   *     subnetwork (false) (optional, default to true)
   * @return Invalid input (status code 400)
   *         or network created (status code 201)
   */
  @ApiOperation(
      value =
          "Add annotation to network nodes and/or relationships. Results in the creation of a new network entity, keeping the entity with UUID unchanged. ",
      nickname = "addAnnotationToNetwork", notes = "",
      response = NetworkInventoryItem.class,
      tags =
          {
              "networks",
          })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Invalid input")
                  , @ApiResponse(code = 201, message = "network created",
                                 response = NetworkInventoryItem.class)
                })
  @PostMapping(value = "/networks/{UUID}/annotation",
               produces = {"application/json"}, consumes = {"application/json"})
  default ResponseEntity<NetworkInventoryItem>
  addAnnotationToNetwork(
      @ApiParam(
          value = "The UUID of the parent network to derive a new network from",
          required = true) @PathVariable("UUID") UUID UUID,
      @ApiParam(
          value =
              "An annotation item with information about the annotations to be added",
          required = true) @Valid @RequestBody AnnotationItem annotationItem,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(value = "An optional name for the newly generated network")
      @Valid @RequestParam(value = "networkname",
                           required = false) String networkname,
      @ApiParam(
          value =
              "Flag whether to prefix the given networkname on the original network name (true) or use networkname as sole name for the created network (false)",
          defaultValue = "false") @Valid
      @RequestParam(value = "prefixName", required = false,
                    defaultValue = "false") Boolean prefixName,
      @ApiParam(
          value =
              "Flag whether to derive a new network and add annotation to it (true) or add annotation to existing network without deriving subnetwork (false)",
          defaultValue = "true") @Valid
      @RequestParam(value = "derive", required = false,
                    defaultValue = "true") Boolean derive) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"relationTypes\" : [ \"stimulation\", \"stimulation\" ], \"name\" : \"Example Network\", \"organismCode\" : \"hsa\", \"numberOfNodes\" : 0, \"numberOfRelations\" : 6, \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ], \"networkMappingType\" : \"REGULATORY\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /networks/{UUID}/csv : Provide a csv-file with annotation information
   *
   * @param UUID The UUID of the network to add the data to (required)
   * @param type The type of data that csv file adds to the network (i.e.
   *     Drivergene, Drugtarget) (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param networkname An optional name for the newly generated network
   *     (optional)
   * @param prefixName Flag whether to prefix the given networkname on the
   *     original network name (true) or use networkname as sole name for the
   *     created network (false) (optional, default to false)
   * @param derive Flag whether to derive a new network and add annotation to it
   *     (true) or add annotation to existing network without deriving
   *     subnetwork (false) (optional, default to true)
   * @param data  (optional)
   * @return Invalid input (status code 400)
   *         or network created (status code 201)
   */
  @ApiOperation(value = "Provide a csv-file with annotation information",
                nickname = "addCsvDataToNetwork", notes = "",
                response = NetworkInventoryItem.class,
                tags =
                    {
                        "networks",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Invalid input")
                  , @ApiResponse(code = 201, message = "network created",
                                 response = NetworkInventoryItem.class)
                })
  @PostMapping(value = "/networks/{UUID}/csv", produces = {"application/json"},
               consumes = {"multipart/form-data"})
  default ResponseEntity<NetworkInventoryItem>
  addCsvDataToNetwork(
      @ApiParam(value = "The UUID of the network to add the data to",
                required = true) @PathVariable("UUID") UUID UUID,
      @NotNull @ApiParam(
          value =
              "The type of data that csv file adds to the network (i.e. Drivergene, Drugtarget)",
          required = true) @Valid @RequestParam(value = "type",
                                                required = true) String type,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(value = "An optional name for the newly generated network")
      @Valid @RequestParam(value = "networkname",
                           required = false) String networkname,
      @ApiParam(
          value =
              "Flag whether to prefix the given networkname on the original network name (true) or use networkname as sole name for the created network (false)",
          defaultValue = "false") @Valid
      @RequestParam(value = "prefixName", required = false,
                    defaultValue = "false") Boolean prefixName,
      @ApiParam(
              value =
                  "The column name to match to the symbol of the network nodes",
              defaultValue = "gene") @Valid
          @RequestParam(value = "match", required = false,
                        defaultValue = "") String match,
      @ApiParam(
          value =
              "Flag whether to derive a new network and add annotation to it (true) or add annotation to existing network without deriving subnetwork (false)",
          defaultValue = "true") @Valid
      @RequestParam(value = "derive", required = false,
                    defaultValue = "true") Boolean derive,
      @ApiParam(value = "") @Valid
      @RequestPart(value = "data", required = false) List<MultipartFile> data) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"relationTypes\" : [ \"stimulation\", \"stimulation\" ], \"name\" : \"Example Network\", \"organismCode\" : \"hsa\", \"numberOfNodes\" : 0, \"numberOfRelations\" : 6, \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ], \"networkMappingType\" : \"REGULATORY\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /networks/{UUID}/myDrug : Provide a URL to a MyDrug Neo4j Database and
   * add Drug nodes and Drug-targets-&gt;Gene Relationships to a network
   *
   * @param UUID The UUID of the network that the myDrug Data should be added
   *     to. A copy will be created. (required)
   * @param myDrugURL A base url of a MyDrug Database including the port number
   *     (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param networkname An optional name for the newly generated network
   *     (optional)
   * @param prefixName Flag whether to prefix the given networkname on the
   *     original network name (true) or use networkname as sole name for the
   *     created network (false) (optional, default to false)
   * @param derive Flag whether to derive a new network and add annotation to it
   *     (true) or add annotation to existing network without deriving
   *     subnetwork (false) (optional, default to true)
   * @return Created network with MyDrug nodes and relations added. (status code
   *     201)
   *         or Bad Request (status code 400)
   */
  @ApiOperation(
      value =
          "Provide a URL to a MyDrug Neo4j Database and add Drug nodes and Drug-targets->Gene Relationships to a network",
      nickname = "addMyDrugRelations", notes = "",
      response = NetworkInventoryItem.class,
      tags =
          {
              "networks",
              "mydrug",
          })
  @ApiResponses(
      value =
      {
        @ApiResponse(
            code = 201,
            message = "Created network with MyDrug nodes and relations added.",
            response = NetworkInventoryItem.class)
        ,
            @ApiResponse(code = 400, message = "Bad Request")
      })
  @PostMapping(value = "/networks/{UUID}/myDrug",
               produces = {"application/json"})
  default ResponseEntity<NetworkInventoryItem>
  addMyDrugRelations(
      @ApiParam(
          value =
              "The UUID of the network that the myDrug Data should be added to. A copy will be created.",
          required = true) @PathVariable("UUID") UUID UUID,
      @NotNull @ApiParam(
          value = "A base url of a MyDrug Database including the port number",
          required = true) @Valid
      @RequestParam(value = "myDrugURL", required = true) String myDrugURL,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(value = "An optional name for the newly generated network")
      @Valid @RequestParam(value = "networkname",
                           required = false) String networkname,
      @ApiParam(
          value =
              "Flag whether to prefix the given networkname on the original network name (true) or use networkname as sole name for the created network (false)",
          defaultValue = "false") @Valid
      @RequestParam(value = "prefixName", required = false,
                    defaultValue = "false") Boolean prefixName,
      @ApiParam(
          value =
              "Flag whether to derive a new network and add annotation to it (true) or add annotation to existing network without deriving subnetwork (false)",
          defaultValue = "true") @Valid
      @RequestParam(value = "derive", required = false,
                    defaultValue = "true") Boolean derive) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"relationTypes\" : [ \"stimulation\", \"stimulation\" ], \"name\" : \"Example Network\", \"organismCode\" : \"hsa\", \"numberOfNodes\" : 0, \"numberOfRelations\" : 6, \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ], \"networkMappingType\" : \"REGULATORY\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /networks : Create a copy of the network with uuid UUID
   *
   * @param parentUUID The UUID of the parent network to be copied (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param networkname An optional name for the newly generated network
   *     (optional)
   * @param prefixName Flag whether to prefix the given networkname on the
   *     original network name (true) or use networkname as sole name for the
   *     created network (false) (optional, default to false)
   * @param suffixName Flag whether to suffix the given networkname on the
   *     generated default-name (orgCode-mappingType-source-version) (true) or
   *     use networkname as sole name for the created network (false) (optional,
   *     default to false)
   * @return Invalid input (status code 400)
   *         or The current user is forbidden from accessing this data (status
   * code 403) or network copied (status code 201)
   */
  @ApiOperation(value = "Create a copy of the network with uuid UUID",
                nickname = "copyNetwork", notes = "",
                response = NetworkInventoryItem.class,
                tags =
                    {
                        "networks",
                    })
  @ApiResponses(
      value =
      {
        @ApiResponse(code = 400, message = "Invalid input")
        ,
            @ApiResponse(
                code = 403,
                message =
                    "The current user is forbidden from accessing this data"),
            @ApiResponse(code = 201, message = "network copied",
                         response = NetworkInventoryItem.class)
      })
  @PostMapping(value = "/networks", produces = {"application/json"})
  default ResponseEntity<NetworkInventoryItem>
  copyNetwork(
      @NotNull @ApiParam(value = "The UUID of the parent network to be copied",
                         required = true) @Valid
      @RequestParam(value = "parentUUID", required = true) UUID parentUUID,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(value = "An optional name for the newly generated network")
      @Valid @RequestParam(value = "networkname",
                           required = false) String networkname,
      @ApiParam(
          value =
              "Flag whether to prefix the given networkname on the original network name (true) or use networkname as sole name for the created network (false)",
          defaultValue = "false") @Valid
      @RequestParam(value = "prefixName", required = false,
                    defaultValue = "false") Boolean prefixName,
      @ApiParam(
          value =
              "Flag whether to suffix the given networkname on the generated default-name (orgCode-mappingType-source-version) (true) or use networkname as sole name for the created network (false)",
          defaultValue = "false") @Valid
      @RequestParam(value = "suffixName", required = false,
                    defaultValue = "false") Boolean suffixName) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"relationTypes\" : [ \"stimulation\", \"stimulation\" ], \"name\" : \"Example Network\", \"organismCode\" : \"hsa\", \"numberOfNodes\" : 0, \"numberOfRelations\" : 6, \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ], \"networkMappingType\" : \"REGULATORY\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * DELETE /networks/{UUID} : Request the deletion of a network
   *
   * @param user The user which requests deletion of their network (required)
   * @param UUID The UUID of the network to delete (required)
   * @return Bad Request (status code 400)
   *         or The current user is forbidden from accessing this data (status
   * code 403) or The network you tried to delete does not exist (status code
   * 404) or Network deleted. (status code 204)
   */
  @ApiOperation(value = "Request the deletion of a network",
                nickname = "deleteNetwork", notes = "",
                tags =
                    {
                        "networks",
                    })
  @ApiResponses(
      value =
      {
        @ApiResponse(code = 400, message = "Bad Request")
        ,
            @ApiResponse(
                code = 403,
                message =
                    "The current user is forbidden from accessing this data"),
            @ApiResponse(code = 404,
                         message =
                             "The network you tried to delete does not exist"),
            @ApiResponse(code = 204, message = "Network deleted.")
      })
  @DeleteMapping(value = "/networks/{UUID}")
  default ResponseEntity<Void>
  deleteNetwork(
      @ApiParam(value = "The user which requests deletion of their network",
                required = true) @RequestHeader(value = "user",
                                                required = true) String user,
      @ApiParam(value = "The UUID of the network to delete",
                required = true) @PathVariable("UUID") UUID UUID) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /networks/{UUID}/filter : Filter a network according to the request
   * body options. Results in the creation of a new network entity, keeping the
   * entity with UUID unchanged.
   *
   * @param UUID The UUID of the parent network to derive a new network from
   *     (required)
   * @param filterOptions A FilterOptions item containing the information for
   *     the filtering process (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param networkname An optional name for the newly generated network
   *     (optional)
   * @param prefixName Flag whether to prefix the given networkname on the
   *     original network name (true) or use networkname as sole name for the
   *     created network (false) (optional, default to false)
   * @return Invalid input (status code 400)
   *         or network created (status code 201)
   */
  @ApiOperation(
      value =
          "Filter a network according to the request body options. Results in the creation of a new network entity, keeping the entity with UUID unchanged.",
      nickname = "filterNetwork", notes = "",
      response = NetworkInventoryItem.class,
      tags =
          {
              "networks",
          })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Invalid input")
                  , @ApiResponse(code = 201, message = "network created",
                                 response = NetworkInventoryItem.class)
                })
  @PostMapping(value = "/networks/{UUID}/filter",
               produces = {"application/json"}, consumes = {"application/json"})
  default ResponseEntity<NetworkInventoryItem>
  filterNetwork(
      @ApiParam(
          value = "The UUID of the parent network to derive a new network from",
          required = true) @PathVariable("UUID") UUID UUID,
      @ApiParam(
          value =
              "A FilterOptions item containing the information for the filtering process",
          required = true) @Valid @RequestBody FilterOptions filterOptions,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(value = "An optional name for the newly generated network")
      @Valid @RequestParam(value = "networkname",
                           required = false) String networkname,
      @ApiParam(
          value =
              "Flag whether to prefix the given networkname on the original network name (true) or use networkname as sole name for the created network (false)",
          defaultValue = "false") @Valid
      @RequestParam(value = "prefixName", required = false,
                    defaultValue = "false") Boolean prefixName) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"relationTypes\" : [ \"stimulation\", \"stimulation\" ], \"name\" : \"Example Network\", \"organismCode\" : \"hsa\", \"numberOfNodes\" : 0, \"numberOfRelations\" : 6, \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ], \"networkMappingType\" : \"REGULATORY\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /networks/{UUID}/context : Get network context of one or multiple genes
   * in the network with uuid {UUID}
   *
   * @param UUID The UUID of the network that serves as a basis for this context
   *     (required)
   * @param genes  (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param minSize The minimum depth of the context search (optional)
   * @param maxSize The maximum depth of the context search (optional)
   * @param terminateAt find nodes of this type and stop the expansion there
   *     (upload a csv with that type first to be able to use this) (optional)
   * @param direction The direction of the context expansion (upstream,
   *     downstream, both) (optional, default to both)
   * @param directed Denotes whether the return network graph is directed
   *     (optional, default to false)
   * @param weightproperty The name of the annotation used as weight for
   *     calculating shortest paths between entities (optional)
   * @return Bad Request (status code 400)
   *         or The current user is forbidden from accessing this data (status
   * code 403) or successful operation (status code 200)
   */
  @ApiOperation(
      value =
          "Get network context of one or multiple genes in the network with uuid {UUID}",
      nickname = "getContext", notes = "",
      response = org.springframework.core.io.Resource.class,
      tags =
          {
              "networks",
          })
  @ApiResponses(
      value =
      {
        @ApiResponse(code = 400, message = "Bad Request")
        ,
            @ApiResponse(
                code = 403,
                message =
                    "The current user is forbidden from accessing this data"),
            @ApiResponse(code = 200, message = "successful operation",
                         response = org.springframework.core.io.Resource.class)
      })
  @GetMapping(value = "/networks/{UUID}/context",
              produces = {"application/octet-stream"})
  default ResponseEntity<org.springframework.core.io.Resource>
  getContext(
      @ApiParam(
          value =
              "The UUID of the network that serves as a basis for this context",
          required = true) @PathVariable("UUID") UUID UUID,
      @NotNull @ApiParam(value = "", required = true) @Valid
      @RequestParam(value = "genes", required = true) String genes,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(value = "The minimum depth of the context search") @Valid
      @RequestParam(value = "minSize", required = false) Integer minSize,
      @ApiParam(value = "The maximum depth of the context search") @Valid
      @RequestParam(value = "maxSize", required = false) Integer maxSize,
      @ApiParam(
          value =
              "find nodes of this type and stop the expansion there (upload a csv with that type first to be able to use this)")
      @Valid @RequestParam(value = "terminateAt",
                           required = false) String terminateAt,
      @ApiParam(
          value =
              "The direction of the context expansion (upstream, downstream, both)",
          allowableValues = "upstream, downstream, both", defaultValue = "both")
      @Valid @RequestParam(value = "direction", required = false,
                           defaultValue = "both") String direction,
      @ApiParam(value = "Denotes whether the return network graph is directed",
                defaultValue = "false") @Valid
      @RequestParam(value = "directed", required = false,
                    defaultValue = "false") Boolean directed,
      @ApiParam(
          value =
              "The name of the annotation used as weight for calculating shortest paths between entities")
      @Valid @RequestParam(value = "weightproperty",
                           required = false) String weightproperty) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /networks/{UUID} : Retrieve the contents of a network
   *
   * @param UUID The UUID of the network to get (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param directed Boolean flag wether the resulting network-graph should be
   *     directed  (optional, default to false)
   * @return Network is empty or not available (status code 204)
   *         or successful operation (status code 200)
   *         or The current user is forbidden from accessing this data (status
   * code 403)
   */
  @ApiOperation(value = "Retrieve the contents of a network",
                nickname = "getNetwork", notes = "",
                response = org.springframework.core.io.Resource.class,
                tags =
                    {
                        "networks",
                    })
  @ApiResponses(
      value =
      {
        @ApiResponse(code = 204, message = "Network is empty or not available")
        ,
            @ApiResponse(code = 200, message = "successful operation",
                         response = org.springframework.core.io.Resource.class),
            @ApiResponse(
                code = 403,
                message =
                    "The current user is forbidden from accessing this data")
      })
  @GetMapping(value = "/networks/{UUID}",
              produces = {"application/octet-stream"})
  default ResponseEntity<org.springframework.core.io.Resource>
  getNetwork(
      @ApiParam(value = "The UUID of the network to get",
                required = true) @PathVariable("UUID") UUID UUID,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(
          value =
              "Boolean flag wether the resulting network-graph should be directed ",
          defaultValue = "false") @Valid
      @RequestParam(value = "directed", required = false,
                    defaultValue = "false") Boolean directed) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /networks/{UUID}/options : Get available options for network
   *
   * @param UUID The network UUID for which the networkOptions are to be fetched
   *     (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @return The current user is forbidden from accessing this data (status code
   *     403)
   *         or Bad Request (status code 400)
   *         or successful operation (status code 200)
   */
  @ApiOperation(value = "Get available options for network",
                nickname = "getNetworkOptions", notes = "",
                response = NetworkOptions.class,
                tags =
                    {
                        "networks",
                    })
  @ApiResponses(
      value =
      {
        @ApiResponse(
            code = 403,
            message = "The current user is forbidden from accessing this data")
        ,
            @ApiResponse(code = 400, message = "Bad Request"),
            @ApiResponse(code = 200, message = "successful operation",
                         response = NetworkOptions.class)
      })
  @GetMapping(value = "/networks/{UUID}/options",
              produces = {"application/json"})
  default ResponseEntity<NetworkOptions>
  getNetworkOptions(
      @ApiParam(
          value =
              "The network UUID for which the networkOptions are to be fetched",
          required = true) @PathVariable("UUID") UUID UUID,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"annotation\" : { \"relationAnnotation\" : { \"BRAF-stimulation->BRCA\" : 1, \"BRCA-inhibition->BRAF\" : 5 }, \"nodeAnnotationName\" : \"DriverGene\", \"relationAnnotationName\" : \"traversalScore\", \"nodeAnnotation\" : { \"BRAF\" : true, \"BRCA\" : false } }, \"filter\" : { \"relationTypes\" : [ \"stimulation\", \"stimulation\" ], \"nodeSymbols\" : [ \"BRCA1\", \"BRCA1\" ], \"relationSymbols\" : [ \"BRCA1-stimulation->BRAF\", \"BRCA1-stimulation->BRAF\" ], \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ] } }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
  
  /**
   * GET /networks/{UUID}/prov : retrieve provenance information to this network
   * Follows the provenance trail and gathers all avaialable prov-annotation.
   * Assembles a response containing all provenance information that can be used
   * to retrace the creation of this network all the way from the models loaded
   * from the sbml files.
   *
   * @param UUID The UUID of the network that serves as a basis for this context
   *     (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @return Bad Request (status code 400)
   *         or The current user is forbidden from accessing this data (status
   * code 403) or successful operation (status code 200)
   */

  @ApiOperation(
      value = "retrieve provenance information to this network",
      nickname = "getProvenanceInformation",
      notes =
          "Follows the provenance trail and gathers all avaialable prov-annotation. Assembles a response containing all provenance information that can be used to retrace the creation of this network all the way from the models loaded from the sbml files. ",
      response = ProvenanceInfoItem.class,
      tags =
          {
              "networks",
          })
  @ApiResponses(
      value =
      {
        @ApiResponse(code = 400, message = "Bad Request")
        ,

            @ApiResponse(
                code = 403,
                message =
                    "The current user is forbidden from accessing this data"),

            @ApiResponse(code = 200, message = "successful operation",
                         response = ProvenanceInfoItem.class)
      })
  @GetMapping(value = "/networks/{UUID}/prov",
                  produces = {"application/json"})
  default ResponseEntity<ProvenanceInfoItem>
  getProvenanceInformation(
      @ApiParam(
          value =
              "The UUID of the network that serves as a basis for this context",
          required = true) @PathVariable("UUID") UUID UUID

      ,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"wasGeneratedBy\" : [ { \"endpoint\" : \"network/d25f4b9-8dd5-4bc3-9d04-9af418302244/context\", \"endpoint-specific\" : [ { \"key\" : \"endpoint-specific\" }, { \"key\" : \"endpoint-specific\" } ], \"name\" : \"Create_Neighborhood_Network\", \"type\" : \"createContext\", \"params\" : [ { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" }, { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" } ], \"body\" : \"\", \"operation\" : \"POST\" }, { \"endpoint\" : \"network/d25f4b9-8dd5-4bc3-9d04-9af418302244/context\", \"endpoint-specific\" : [ { \"key\" : \"endpoint-specific\" }, { \"key\" : \"endpoint-specific\" } ], \"name\" : \"Create_Neighborhood_Network\", \"type\" : \"createContext\", \"params\" : [ { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" }, { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" } ], \"body\" : \"\", \"operation\" : \"POST\" } ], \"contents\" : \"\", \"wasDerivedFrom\" : [ null, null ], \"wasAttributedTo\" : { \"name\" : \"sbml4j\", \"type\" : \"User\" }, \"type\" : \"MappingNode\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  

  /**
   * GET /networks : List available networks
   *
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @return Bad Request (status code 400)
   *         or successful operation (status code 200)
   */
  @ApiOperation(value = "List available networks", nickname = "listAllNetworks",
                notes = "", response = NetworkInventoryItem.class,
                responseContainer = "List",
                tags =
                    {
                        "networks",
                    })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 400, message = "Bad Request")
                  , @ApiResponse(code = 200, message = "successful operation",
                                 response = NetworkInventoryItem.class,
                                 responseContainer = "List")
                })
  @GetMapping(value = "/networks", produces = {"application/json"})
  default ResponseEntity<List<NetworkInventoryItem>>
  listAllNetworks(@ApiParam(
      value =
          "The user which requests the creation, the configured public user will be used if omitted")
                  @RequestHeader(value = "user",
                                 required = false) String user) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"relationTypes\" : [ \"stimulation\", \"stimulation\" ], \"name\" : \"Example Network\", \"organismCode\" : \"hsa\", \"numberOfNodes\" : 0, \"numberOfRelations\" : 6, \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ], \"networkMappingType\" : \"REGULATORY\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /networks/{UUID}/context : Create network context of one or multiple
   * genes in the network with uuid {UUID}
   *
   * @param UUID The UUID of the network that serves as a basis for this context
   *     (required)
   * @param nodeList The genes for which the context should be generated
   *     (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @param minSize The minimum depth of the context search (optional)
   * @param maxSize The maximum depth of the context search (optional)
   * @param terminateAt find nodes of this type and stop the expansion there
   *     (upload a csv with that type first to be able to use this) (optional)
   * @param direction The direction of the context expansion (upstream,
   *     downstream, both) (optional, default to both)
   * @param networkname An optional name for the newly generated network
   *     (optional)
   * @param prefixName Flag whether to prefix the given networkname on the
   *     original network name (true) or use networkname as sole name for the
   *     created network (false) (optional, default to false)
   * @param weightproperty The name of the annotation used as weight for
   *     calculating shortest paths between entities (optional)
   * @return Bad Request (status code 400)
   *         or The current user is forbidden from accessing this data (status
   * code 403) or context network created (status code 201)
   */
  @ApiOperation(
      value =
          "Create network context of one or multiple genes in the network with uuid {UUID}",
      nickname = "postContext", notes = "",
      response = NetworkInventoryItem.class,
      tags =
          {
              "networks",
          })
  @ApiResponses(
      value =
      {
        @ApiResponse(code = 400, message = "Bad Request")
        ,
            @ApiResponse(
                code = 403,
                message =
                    "The current user is forbidden from accessing this data"),
            @ApiResponse(code = 201, message = "context network created",
                         response = NetworkInventoryItem.class)
      })
  @PostMapping(value = "/networks/{UUID}/context",
               produces = {"application/json"}, consumes = {"application/json"})
  default ResponseEntity<NetworkInventoryItem>
  postContext(
      @ApiParam(
          value =
              "The UUID of the network that serves as a basis for this context",
          required = true) @PathVariable("UUID") UUID UUID,
      @ApiParam(value = "The genes for which the context should be generated",
                required = true) @Valid @RequestBody NodeList nodeList,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user,
      @ApiParam(value = "The minimum depth of the context search") @Valid
      @RequestParam(value = "minSize", required = false) Integer minSize,
      @ApiParam(value = "The maximum depth of the context search") @Valid
      @RequestParam(value = "maxSize", required = false) Integer maxSize,
      @ApiParam(
          value =
              "find nodes of this type and stop the expansion there (upload a csv with that type first to be able to use this)")
      @Valid @RequestParam(value = "terminateAt",
                           required = false) String terminateAt,
      @ApiParam(
          value =
              "The direction of the context expansion (upstream, downstream, both)",
          allowableValues = "upstream, downstream, both", defaultValue = "both")
      @Valid @RequestParam(value = "direction", required = false,
                           defaultValue = "both") String direction,
      @ApiParam(value = "An optional name for the newly generated network")
      @Valid @RequestParam(value = "networkname",
                           required = false) String networkname,
      @ApiParam(
          value =
              "Flag whether to prefix the given networkname on the original network name (true) or use networkname as sole name for the created network (false)",
          defaultValue = "false") @Valid
      @RequestParam(value = "prefixName", required = false,
                    defaultValue = "false") Boolean prefixName,
      @ApiParam(
          value =
              "The name of the annotation used as weight for calculating shortest paths between entities")
      @Valid @RequestParam(value = "weightproperty",
                           required = false) String weightproperty) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"relationTypes\" : [ \"stimulation\", \"stimulation\" ], \"name\" : \"Example Network\", \"organismCode\" : \"hsa\", \"numberOfNodes\" : 0, \"numberOfRelations\" : 6, \"UUID\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nodeTypes\" : [ \"polypeptide chain\", \"polypeptide chain\" ], \"networkMappingType\" : \"REGULATORY\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
  
  /**
   * PUT /networks/{UUID}/prov : Add provenance information to a network
   * Adds the provided request body elements to the provenance-annotation  of
   * the activity that created the network with entityUUID of {UUID}
   *
   * @param UUID The UUID of the network that serves as a basis for this context
   *     (required)
   * @param name A name for this provenance item (required)
   * @param requestBody A freeform json-object with key-value pairs of names and
   *     values to act as provenance-annotation (required)
   * @param user The user which requests the addition of provenance information,
   *     the configured public user will be used if omitted (optional)
   * @return Bad Request (status code 400)
   *         or The current user is forbidden from accessing this data (status
   * code 403) or successful operation (status code 200)
   */

  @ApiOperation(
      value = "Add provenance information to a network",
      nickname = "putProvenanceInformation",
      notes =
          "Adds the provided request body elements to the provenance-annotation  of the activity that created the network with entityUUID of {UUID} ",
      response = ProvenanceInfoItem.class,
      tags =
          {
              "networks",
          })
  @ApiResponses(
      value =
      {
        @ApiResponse(code = 400, message = "Bad Request")
        ,

            @ApiResponse(
                code = 403,
                message =
                    "The current user is forbidden from accessing this data"),

            @ApiResponse(code = 200, message = "successful operation",
                         response = ProvenanceInfoItem.class)
      })
  @PutMapping(value = "/networks/{UUID}/prov",
                  produces = {"application/json"},
                  consumes = {"application/json"})
  default ResponseEntity<ProvenanceInfoItem>
  putProvenanceInformation(
      @ApiParam(
          value =
              "The UUID of the network that serves as a basis for this context",
          required = true) @PathVariable("UUID") UUID UUID

      ,
      @NotNull @ApiParam(value = "A name for this provenance item",
                         required = true) @Valid
      @RequestParam(value = "name", required = true) String name

      ,

      @ApiParam(
          value =
              "A freeform json-object with key-value pairs of names and values to act as provenance-annotation",
          required = true) @Valid @RequestBody Map<String, Object> requestBody,
      @ApiParam(
          value =
              "The user which requests the addition of provenance information, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString =
              "{ \"wasGeneratedBy\" : [ { \"endpoint\" : \"network/d25f4b9-8dd5-4bc3-9d04-9af418302244/context\", \"endpoint-specific\" : [ { \"key\" : \"endpoint-specific\" }, { \"key\" : \"endpoint-specific\" } ], \"name\" : \"Create_Neighborhood_Network\", \"type\" : \"createContext\", \"params\" : [ { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" }, { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" } ], \"body\" : \"\", \"operation\" : \"POST\" }, { \"endpoint\" : \"network/d25f4b9-8dd5-4bc3-9d04-9af418302244/context\", \"endpoint-specific\" : [ { \"key\" : \"endpoint-specific\" }, { \"key\" : \"endpoint-specific\" } ], \"name\" : \"Create_Neighborhood_Network\", \"type\" : \"createContext\", \"params\" : [ { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" }, { \"parameter\" : \"parentUUID\", \"value\" : \"d25f4b9-8dd5-4bc3-9d04-9af418302244\" } ], \"body\" : \"\", \"operation\" : \"POST\" } ], \"contents\" : \"\", \"wasDerivedFrom\" : [ null, null ], \"wasAttributedTo\" : { \"name\" : \"sbml4j\", \"type\" : \"User\" }, \"type\" : \"MappingNode\" }";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
