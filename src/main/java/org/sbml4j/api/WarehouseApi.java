/**
 * --------------------------------------------------------------------------
 *                                 SBML4j
 * --------------------------------------------------------------------------
 * University of Tuebingen, 2022.
 * 
 * This code is part of the SBML4j software package and subject to the terms
 * and conditions defined by its license (MIT License). For license details
 * please refer to the LICENSE file included as part of this source code
 * package.
 * 
 * For a full list of authors, please refer to the file AUTHORS.
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech) (5.3.1). https://openapi-generator.tech Do
 * not edit the class manually.
 */
package org.sbml4j.api;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.
Generated(value = "org.openapitools.codegen.languages.SpringCodegen",
          date = "2022-10-12T16:12:33.936365+02:00[Europe/Berlin]")
@Validated
@Api(value = "Warehouse", description = "the Warehouse API")
public interface WarehouseApi {

  default Optional<NativeWebRequest> getRequest() { return Optional.empty(); }

  /**
   * GET /databaseUUID : Get the uuid of the databasenode for source with
   * version
   *
   * @param organism The three-letter organism code (required)
   * @param source The name of the source this SBML originates from (required)
   * @param version The version of the source this SBML originates from
   *     (required)
   * @return successful operation (status code 200)
   *         or Database node for source and version found (status code 404)
   */

  @ApiOperation(
      value = "Get the uuid of the databasenode for source with version",
      nickname = "getDatabaseUUID", notes = "", response = UUID.class,
      tags =
          {
              "warehouse",
          })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 200, message = "successful operation",
                               response = UUID.class)
                  ,

                      @ApiResponse(
                          code = 404,
                          message =
                              "Database node for source and version found")
                })
  @RequestMapping(method = RequestMethod.GET, value = "/databaseUUID",
                  produces = {"application/json"})
  default ResponseEntity<UUID>
  getDatabaseUUID(
      @NotNull @ApiParam(value = "The three-letter organism code",
                         required = true) @Valid
      @RequestParam(value = "organism", required = true) String organism

      ,
      @NotNull
      @ApiParam(value = "The name of the source this SBML originates from",
                required = true) @Valid
      @RequestParam(value = "source", required = true) String source

      ,
      @NotNull
      @ApiParam(value = "The version of the source this SBML originates from",
                required = true) @Valid
      @RequestParam(value = "version", required = true) String version

  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString = "\"0d25f4b9-8dd5-4bc3-9d04-9af418302244\"";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /fileorigin/{UUID} : Get the uuid of the file node that connects via
   * wasDerivedFrom
   *
   * @param UUID The UUID of the pathway to be mapped (required)
   * @param user The user which requests the creation, the configured public
   *     user will be used if omitted (optional)
   * @return successful operation (status code 200)
   *         or Database node for source and version found (status code 404)
   */

  @ApiOperation(
      value = "Get the uuid of the file node that connects via wasDerivedFrom",
      nickname = "getFileorigin", notes = "", response = UUID.class,
      tags =
          {
              "warehouse",
          })
  @ApiResponses(value =
                {
                  @ApiResponse(code = 200, message = "successful operation",
                               response = UUID.class)
                  ,

                      @ApiResponse(
                          code = 404,
                          message =
                              "Database node for source and version found")
                })
  @RequestMapping(method = RequestMethod.GET, value = "/fileorigin/{UUID}",
                  produces = {"application/json"})
  default ResponseEntity<List<UUID>>
  getFileorigin(
      @ApiParam(value = "The UUID of the pathway to be mapped",
                required = true) @PathVariable("UUID") UUID UUID

      ,
      @ApiParam(
          value =
              "The user which requests the creation, the configured public user will be used if omitted")
      @RequestHeader(value = "user", required = false) String user) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType :
           MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
          String exampleString = "[\"0d25f4b9-8dd5-4bc3-9d04-9af418302244\"]";
          ApiUtil.setExampleResponse(request, "application/json",
                                     exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
